[
  {
    "filename": "modu-basics.md",
    "content": "# Learn the basics of Modu in a single post\r\nImage: ./banners/modu-basics.png\r\nID: 2\r\nDate: 2025-01-04\r\nAuthor: aquiffoo\r\n\r\nModu is a relatively new programming language developed by [Cyteon](https://cyteon.tech/modu). It debuted in December 11, 2024 and instantly received love from the community, for its simplicity and constant updates. Nowadays, there are whole Discord cults related to it! I created one of them myself, to show my love to the language. Today, I'm going to guide you, a begginer on Modu, on your journey - Here you will learn the basics to become the CHAD Modu User.\r\n\r\n## Install Modu first\r\nHere you could take two different paths:\r\n\r\n### 1. Through Cargo\r\n1. First, i'd recommend you [install Rust](https://www.rust-lang.org/tools/install) (it's what Modu was made with and comes with Cargo, the main source for installing it)\r\n2. Check if cargo is installed by running `cargo --version`:\\\r\n![In my case, it is.](./public/posts/assets/screenshot-cargo-version.png)\r\n3. Now that you have cargo up and running, run `cargo +nightly install modu` to get Modu installed on your machine.\r\n4. Check if it's up and running with `modu`\r\nObs. IF YOU ARE USING VSCODE, you can download the [extension on GitHub](https://github.com/Cyteon/modu/blob/main/extensions/vscode/modu-lang-0.0.1.vsix)\r\n\r\n### 2. Through the Binaries\r\nBy doing this approach, Rust is not necessary. However, to update it, you have to download new binaries every time.\r\n1. [Download the latest Modu binaries on GitHub actions](https://github.com/Cyteon/modu/actions/workflows/rust.yml)\r\n2. Put it on your PATH environment variable\r\n3. Check if it's up and running with `modu`\r\n\r\n## Input/Output\r\nModu's syntax was designed for being simple, reliable and keeping you focused on writing code, instead of arguing with your compiler. (i'm looking at you, Rust!)\\\r\nTo make a simple Hello World program, you don't even need a main function, like in Go or Kotlin:\r\n```rs\r\n// this is a comment, the interpreter does not treat them as code\r\nprint(\"Hello, World!\"); //semicolons are optional too fyi!\r\n```\r\nThis program just shows the string `Hello, World!` on the console, nothing much. Let's take it to the next level!\r\n```rs\r\nlet string = input(\"Print something: \")\r\nprint(string)\r\n```\r\nNow, the program is taking an input from the user, adding interaction to it. Inputs are taken as strings.\r\n\r\n## Variables and types\r\nIn Modu, we have variables, that we can assign values to, to keep them in memory whenever we need to get them again.\r\n```rs\r\nlet string = \"this is text\"\r\nlet integer = 34\r\nlet anotherInt = integer + 35\r\nlet decimal = 8.1\r\nlet boolean = true\r\nlet anotherBoolean = 3 != 1 + 2 //false\r\n```\r\nDeclare and modify variables using the `let` keyword in front of the variable's name, then `=` and a value. The interpreter will assign the type of the variable by itself with no hassle.\r\n\r\n## If statements\r\nYou can check if a condition is true using `if` statements. Start with `if`, then a boolean condition, like `3 == 1 + 2` or `4 != 2 * 2`\r\n```rs\r\nlet a = 3;\r\nlet b = 4;\r\n\r\nif a == b {\r\n    print(\"a (\", a, \") and b (\", b, \") are equal!\")\r\n} if a !== b {\r\n    print(\"a (\", a, \") and b (\", b, \") are not equal!\")    \r\n}\r\n\r\n// the program above prints \"a (3) and b (4) are not equal!\"\r\n```\r\nNotice that we also used concatenation on the `print` function, that supports multiple args, separating statements by commas, to put them together.\r\n\r\n## Custom Functions\r\nYou can declare functions, blocks of code that can be called repeatedly to run a specific action, using the `fn` keyword.\r\n```rs\r\nfn wave(person) {\r\n    print(\"Hello, \", person, \"!\")\r\n}\r\n\r\nlet name = input(\"What is your name? \");\r\nwave(name); //says \"Hello, [User Input]\"\r\n```\r\nThe function `wave()` does a specific action, use the console to greet the user, in this case.\r\n\r\n## Import statements\r\nYou can import libraries to Modu to increase its functionality. You use the `import` statement on the top of your program to include the lib's functions and variables:\r\n```rs\r\nimport \"math\" as m\r\nimport \"os\" as os\r\nimport \"file\" as * //does not require calling library \"file\" for accessing its functions\r\n```\r\nCurrent libraries include:\r\n- math: Includes functions like `div`, `mul`, `abs`, `random_int`, `random`, `floor`, `ceil`, `sqrt` and `pow`, and constants like `PI`\r\n- file: Includes the `read` and `write` functions for managing external files.\r\n- os: Lets you run commands with `exec` and check your os with `name`.\r\n\r\n### You can import your own files too\r\nWe can create a file `something.modu` and import it to another, `main.modu`.\\\r\nsomething.modu:\r\n```rs\r\nimport \"os\" as os;\r\n\r\nfn doSomething() {\r\n    print(\"doing something...\")\r\n}\r\n\r\nfn mkdir(dirname) {\r\n    os.exec(\"mkdir \" + dirname); //you can concatenate 2 STRINGS with + on functions that don't have infinite args\r\n    let pwd = os.exec(\"pwd\");\r\n    print(\"directory \", dirname, \" created on \", pwd, \".\");\r\n}\r\n```\r\nmain.modu:\r\n```rs\r\nimport \"something.modu\" as sm;\r\n\r\nlet dir = input(\"Create a dir called: \");\r\ndoSomething();\r\nmkdir(dir);\r\n```\r\n\r\n### Modu Packages\r\nYou can also post packages for other people to use with Modu Packages. Soon there'll be a post dedicated to it.\r\n\r\n## Conclusion\r\nWell, that's it! I've teached you all the basics about Modu. Share this to anyone who insterested in learning this amazing programming language.\\\r\n\\\r\nPeace!\r\n"
  },
  {
    "filename": "moduassist.md",
    "content": "# Introducing ModuAssist - AI for the Modu era\r\nImage: ./banners/moduassist.png\r\nID: 4\r\nDate: 2024-01-05\r\nAuthor: aquiffoo\r\n\r\nAt LearnModu, we think AI has changed the way people learn new things on the Internet. Alongside our blog posts, that are up to date on the latest info and share valuable information about Modu, we are launching ModuAssist, our all-new online assistant, the only one on the entire web with knowledge on Modu and its syntax.\\\r\nModuAssist is a breakthrough in the AI copilot space, we are preparing AI for the Modu era!\\\r\n\\\r\n\\\r\n\\\r\nBy your brazilian LearnModu member.\\\r\nPeace!\r\n"
  },
  {
    "filename": "moduterm.md",
    "content": "# Make your own Terminal (with Modu v0.5.0!)\r\nImage: ./banners/blank.png\r\nID: 3\r\nDate: 2025-01-04\r\nAuthor: paintdev (404PageN0tFound)\r\n\r\nModu is in all respects a **beginner** programming language, so how would we make a Terminal? Luckily you've found this tutorial, and I'll explain step-by-step in how to make your own Terminal.\r\n**You need Modu installed to follow this tutorial. Using the Web IDE won't work. Click [here](https://learnmodu.org/post.html?id=2) to view a tutorial stating how to install Modu.**\r\n\r\n## Let's start!\r\nOkay, firstly, we need to import os and we need to add a variable containing input.\r\n```rs\r\nimport \"os\" as os;\r\nlet cmd = input(\"LearnModu Terminal, Enter a command:\\n\")\r\n```\r\nNow, when we run this code, it should ask for what command you want, and you can type anything, but nothing will happen. Let's fix that.\r\nExpanding onto our code, let's add an os.exec to actually make this work.\r\n```rs\r\nimport \"os\" as os;\r\nlet cmd = input(\"LearnModu Terminal, Enter a command:\\n\")\r\nos.exec(cmd)\r\n```\r\nNow, when we run this code, it'll ask for input, and after execute the given command!\r\nThis is quite basic, but you can edit this to your liking!\r\n\r\n\\\r\nThanks for reading!\r\n"
  },
  {
    "filename": "test.md",
    "content": "# Test post\r\nImage: ./banners/test.png\r\nID: 1\r\nDate: 2025-01-03\r\nAuthor: aquiffoo\r\n\r\nThis is just a test post to see if the JS backend works properly on parsing the Markdown to HTML and then rendering it.\r\n## Section 1\r\nThat's a section, goddamn!\r\n## Section 2\r\nAnother section"
  }
]